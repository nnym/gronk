plugins {
	id("java")
	id("signing")
	id("net.auoeke.gronk")
	id("com.github.johnrengelman.shadow").version("latest.release")
}

group("net.auoeke.gronk.test")
description("gronk fat test project")
javaVersion(17)
/* equivalent to
sourceCompatibility = 17
targetCompatibility = 17
*/

println gronk.class.protectionDomain.codeSource.location

gronk {
	// Add net.auoeke:uncheck to every annotation processor configuration.
	// Add Central Repository.
	uncheck()
	export(sourceSets.main, "jdk.compiler/com.sun.tools.javac.api")

	// Applies maven-publish.
	// mavenLocal() and maven with findProperty("maven.{repository,username,password}")
	// Adds group, name, description, url, scm: {url: scm}, licenses: {license: {url: license}} and developers: {developer: {email}} to every Maven publication.
	publish {
		scm = "https://github.com/auoeke/gronk/tree/master/test/cases/fat"
		license = "https://github.com/auoeke/gronk/blob/master/LICENSE.md"
		email = "tjmnkrajyej@gmail.com"
	}
}

sourceSets {
	main {
		export("jdk.compiler/com.sun.tools.javac.tree")
	}
}

repositories {
	maven("storage.googleapis.com/devan-maven")
	/* approximately equivalent to
	maven {url = name = "https://storage.googleapis.com/devan-maven"}
	*/
}

dependencies {
	implementation("net.auoeke:reflect")
	/* equivalent to
	implementation("net.auoeke:reflect") {
		version {
			prefer("+")
		}
	}
	*/
}

shadowJar {
	mergeManifests {
		include {manifest.mainAttributes.getValue("Agent-Class")?.startsWith("net.auoeke.reflect")}
	}
}

if (file([buildDir, "gronkTest"]) != new File(buildDir, "gronkTest")) {
	throw new AssertionError()
}

publishing {
	repositories {
		// maven(findProperty("maven.repository")) {
		// 	username(findProperty("maven.username"))
		// 	password(findProperty("maven.password"))
		// }
		/* approximately equivalent to
		maven {
			url = "https://maven.auoeke.net"

			credentials {
				username = findProperty("maven.username")
				password = findProperty("maven.password")
			}
		}
		*/
	}

	/* implicit
		publications {
			maven(MavenPublication) {
				from(components.java)
			}

			withType(MavenPublication) {
				versionMapping {
					allVariants {
						fromResolutionResult()
					}
				}

				signing.sign(it)
			}
		}
	*/
}
